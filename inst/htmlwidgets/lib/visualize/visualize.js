"use strict";

// Generated by CoffeeScript 2.0.3
(function () {
  var CommitsNetwork, Network, UpdateNodes, VariablesNetwork;

  UpdateNodes = function UpdateNodes(type, vis, rx, ry) {
    var linksG, nodesG, updateNodes;
    // links group goes before nodes to paint them below
    linksG = vis.append("g").attr("id", "links_" + type);
    nodesG = vis.append("g").attr("id", "nodes_" + type);
    updateNodes = function updateNodes() {};
    updateNodes.update = function (nodes, links) {
      var enter, link, node;

      // nodes: group element, background node, text, mouse-face
      node = nodesG.selectAll("g." + type).data(nodes, function (d) {
        return d.id;
      });
      enter = node.enter().append("g").attr("class", "" + type);
      enter.append("ellipse").attr("rx", rx).attr("ry", ry);
      enter.append("text").attr("dy", ry / 3).attr("text-anchor", "middle").attr("class", "label").text(function (d) {
        return d.label;
      });
      enter.append("ellipse").attr("class", "face").attr("rx", rx).attr("ry", ry).style('fill', 'transparent');
      node.exit().remove();
      // links
      link = linksG.selectAll("line.link").data(links, function (d) {
        return d.source.id + "_" + d.target.id;
      });
      link.enter().append("line").attr("class", "link").attr("stroke", "#ddd");
      link.exit().remove();
      return this.updatePosition();
    };
    updateNodes.updatePosition = function () {
      var link, node;
      node = nodesG.selectAll("g." + type).attr("transform", function (d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      return link = linksG.selectAll("line.link").attr("x1", function (d) {
        return d.source.x;
      }).attr("y1", function (d) {
        return d.source.y;
      }).attr("x2", function (d) {
        return d.target.x;
      }).attr("y2", function (d) {
        return d.target.y;
      });
    };
    updateNodes.remove = function () {
      var node;
      return node = nodesG.selectAll("g." + type).remove();
    };
    updateNodes.on = function (what, callback) {
      return nodesG.selectAll(".face").on(what, callback);
    };
    return updateNodes;
  };

  // compute positioning of objects
  VariablesNetwork = function VariablesNetwork(radius, vis) {
    var animation, center, computePosition, links, move, updater, variablesNetwork, vars;
    center = {};
    vars = [];
    links = [];
    updater = UpdateNodes('variable', vis, 20, 10);
    animation = null;
    variablesNetwork = function variablesNetwork() {};
    variablesNetwork.update = function (newCenter, newVars, newLinks) {
      center = newCenter;
      vars = newVars;
      links = newLinks;
      // initialize all variables inside the commit node
      vars.forEach(function (v) {
        v.x = center.x;
        return v.y = center.y;
      });
      updater.update(vars, links);
      return updater.updatePosition();
    };
    // returns a callback used with d3.timer
    move = function move(alpha) {
      vars.forEach(function (d, i) {
        var p;
        p = computePosition(i * 360 / vars.length, alpha);
        d.x = p.x;
        return d.y = p.y;
      });
      return updater.updatePosition();
    };

    // transition outside
    variablesNetwork.show = function () {
      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 150;

      var self;
      if (animation != null) {
        animation.stop();
      }
      return animation = self = d3.timer(function (elapsed) {
        if (elapsed > timeout) {
          self.stop();
        }
        return move(Math.min(elapsed / timeout, 1));
      });
    };

    // transition inside
    variablesNetwork.hide = function () {
      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 150;

      var self;
      if (animation != null) {
        animation.stop();
      }
      return animation = self = d3.timer(function (elapsed) {
        if (elapsed > timeout) {
          self.stop();
        }
        return move(1 - Math.min(elapsed / timeout, 1));
      });
    };
    computePosition = function computePosition(angle, alpha) {
      var x, y;
      x = center.x + alpha * radius * Math.cos(angle * Math.PI / 180);
      y = center.y + alpha * radius * Math.sin(angle * Math.PI / 180);
      return {
        "x": x,
        "y": y
      };
    };
    return variablesNetwork;
  };

  // compute positioning of commits
  CommitsNetwork = function CommitsNetwork(vis, showVariables, hideVariables) {
    var dist, force, network, updater;
    updater = UpdateNodes('commit', vis, 40, 15);
    force = null;
    dist = 150;
    network = function network() {};
    network.setData = function (commits, links) {
      updater.update(commits, links);
      updater.on("mouseover", showVariables);
      updater.on("mouseout", hideVariables);
      return force = d3.forceSimulation(commits).force("charge", d3.forceManyBody()).force("link", d3.forceLink(links).distance(dist)).alphaMin(.1).on("tick", function (e) {
        return updater.updatePosition();
      });
    };
    return network;
  };

  // main class
  Network = function Network(selection) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var cn, filterLinks, hideVariables, mapNodes, network, options, setupData, showVariables, vis, vn;
    options = {
      width: 500,
      height: 500,
      varRadius: 75
    };
    vn = null;
    cn = null;
    vis = null;
    // constructor
    network = function network() {};
    network.init = function () {
      // create the canvas
      vis = d3.select(selection).append("svg");
      // objects go before commits to paint them below
      vn = VariablesNetwork(options.varRadius, vis);
      cn = CommitsNetwork(vis, showVariables, hideVariables);
      this.setData(data);
      return this.setSize(options.width, options.height);
    };
    // update the data set
    network.setData = function (newData) {
      var links;
      if (!('commits' in newData && 'objects' in newData && 'links' in newData)) {
        return data;
      }
      data = setupData(newData);
      links = filterLinks(data.links, data.commits);
      return cn.setData(data.commits, links);
    };

    // update widget size
    network.setSize = function (width, height) {
      options.width = width;
      options.height = height;
      return vis.attr("width", width).attr("height", height);
    };
    // transform the data set
    setupData = function setupData(data) {
      var allNodes, nodesMap;
      // initialize positioning of commits
      data.commits.forEach(function (n) {
        n.x = Math.floor(Math.random() * options.width);
        return n.y = Math.floor(Math.random() * options.height);
      });
      // find parent comments for all objects
      data.objects.forEach(function (v) {
        var link;
        link = data.links.filter(function (l) {
          return l.target === v.id;
        });
        if (!link.length) {
          throw "cannot find link for variable " + v.id;
        }
        return v.parent = link[0].source;
      });

      // replace target/source references in links with actual objects
      allNodes = data.commits.concat(data.objects);
      nodesMap = mapNodes(allNodes);
      data.links.forEach(function (l) {
        l.source = nodesMap.get(l.source);
        return l.target = nodesMap.get(l.target);
      });
      return data;
    };
    // Helper function to map node id's to node objects.
    // Returns d3.map of ids -> nodes
    mapNodes = function mapNodes(nodes) {
      var nodesMap;
      nodesMap = d3.map();
      nodes.forEach(function (n) {
        return nodesMap.set(n.id, n);
      });
      return nodesMap;
    };
    // helper function
    filterLinks = function filterLinks(allLinks, curNodes) {
      curNodes = mapNodes(curNodes);
      return allLinks.filter(function (l) {
        return curNodes.get(l.source.id) && curNodes.get(l.target.id);
      });
    };
    // show details of a commit
    showVariables = function showVariables(d, i) {
      var links, vars;
      vars = data.objects.filter(function (v) {
        return v.parent === d.id;
      });
      links = filterLinks(data.links, vars.concat(d));
      vn.update(d, vars, links);
      return vn.show();
    };

    // hide the detailed view of a commit
    hideVariables = function hideVariables(d, i) {
      return vn.hide();
    };
    network.init();
    return network;
  };

  // make it global; this doesn't work in RStudio because RStudio viewer's
  // JavaScript engine is too old
  // export { Network }
  window.Network = Network;
}).call(undefined);