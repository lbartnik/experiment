'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Generated by CoffeeScript 2.0.3
(function () {
  var assert, sampleData, suite, test;

  assert = chai.assert;

  suite = Mocha.suite;

  test = Mocha.test;

  sampleData = function sampleData() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-1/data.json';

    var req;
    req = new XMLHttpRequest();
    req.open("GET", path, false);
    req.overrideMimeType('application/json');
    req.send();
    if (req.status !== 200) {
      throw 'Cannot load sample data ' + path;
    }
    return JSON.parse(req.responseText);
  };

  suite('Data', function () {
    var extractScale, unique;
    // helpers
    extractScale = function extractScale(steps) {
      var i, len, results, step;
      results = [];
      for (i = 0, len = steps.length; i < len; i++) {
        step = steps[i];
        if (step.scale !== void 0) {
          results.push(step.scale);
        }
      }
      return results;
    };
    unique = function unique(a) {
      var i, key, output, ref, ref1, results, value;
      output = {};
      for (key = i = 0, ref = a.length; 0 <= ref ? i < ref : i > ref; key = 0 <= ref ? ++i : --i) {
        output[(ref1 = a[key].id) != null ? ref1 : a[key]] = a[key];
      }
      results = [];
      for (key in output) {
        value = output[key];
        results.push(value);
      }
      return results;
    };
    // sample data
    setup(function () {
      return this.data = sampleData();
    });
    // test cases
    return suite('Data construction', function () {
      test('data sanity', function () {
        var step;
        assert('links' in this.data);
        assert('steps' in this.data);
        assert.lengthOf(this.data.steps, 16);
        assert.lengthOf(extractScale(this.data.steps), 0);
        assert.sameMembers(unique(function () {
          var i, len, ref, results;
          ref = this.data.steps;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            step = ref[i];
            results.push(step.id !== void 0);
          }
          return results;
        }.call(this)), [true]);
        return assert.sameMembers(unique(function () {
          var i, len, ref, results;
          ref = this.data.steps;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            step = ref[i];
            results.push(_typeof(step.expr));
          }
          return results;
        }.call(this)), ['object', 'string']);
      });
      test('maintains keys', function () {
        var sd;
        sd = Data(this.data);
        assert('steps' in sd);
        return assert('links' in sd);
      });
      test('sets scale', function () {
        var sd;
        sd = Data(this.data);
        assert.lengthOf(sd.steps, 16);
        assert.lengthOf(extractScale(sd.steps), 16);
        return assert.sameMembers(unique(extractScale(sd.steps)), [1]);
      });
      test('concat expression', function () {
        var sd, step;
        sd = Data(this.data);
        return assert.sameMembers(unique(function () {
          var i, len, ref, results;
          ref = sd.steps;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            step = ref[i];
            results.push(_typeof(step.expr));
          }
          return results;
        }()), ['string']);
      });
      return test('replace id with object', function () {
        var sd;
        sd = Data(this.data);
        return sd.links.forEach(function (link) {
          assert.hasAllKeys(link, ['target', 'source']);
          return assert.includeDeepMembers(sd.steps, [link.target]);
        });
      });
    });
  });
}).call(undefined);