"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
(function () {
  var HistoryBrowser;

  HistoryBrowser = function () {
    var initialize;

    var HistoryBrowser = function () {
      function HistoryBrowser(container, data1) {
        _classCallCheck(this, HistoryBrowser);

        this.data = data1;
        this.container = $(container);
        this.frame = $("<div>", {
          id: "details-container"
        }).load($("#browser-1-attachment").attr("href"), null, function () {
          return console.log('done');
        });
      }

      _createClass(HistoryBrowser, [{
        key: "setData",
        value: function setData(data) {
          return this.data = data;
        }
      }, {
        key: "setSize",
        value: function setSize(width1, height1) {
          this.width = width1;
          this.height = height1;
        }
      }, {
        key: "render",
        value: function render() {
          var frame, j, len, ref, results, step, width;
          ref = this.data.sequence();
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            step = ref[j];
            frame = this.frame.clone();
            frame.find("code").text(step.expr).each(function (i, block) {
              return hljs.highlightBlock(block);
            });
            this.container.append(frame);
            if (step.type === "object") {
              results.push(frame.find(".image").remove());
            } else {
              width = this.width;
              frame.find(".object").remove();
              results.push(frame.find(".image img").attr("src", utils.plotHref(step)).on('load', function () {
                return $(this).width(Math.min(width, this.width));
              }));
            }
          }
          return results;
        }
      }]);

      return HistoryBrowser;
    }();

    ;

    initialize = function initialize() {
      var comment, initial;
      outer.width(width).appendTo(selection).height(height - parseInt(outer.css("top")));
      // add code describing this step

      // handle comment
      comment = outer.find(".comment");
      comment.on('keydown', function (e) {
        return e.stopPropagation();
      }).on('keyup', function (e) {
        var cb;
        step.comment = this.value;
        clearTimeout(this.commentUpdate);
        cb = function cb() {
          return commentCallback(step.id, step.comment);
        };
        this.commentUpdate = setTimeout(cb, 3000);
        return e.stopPropagation();
      });
      if (step.comment) {
        return comment.text(step.comment).removeClass("empty");
      } else {
        initial = comment.attr("initial");
        return outer.find(".comment").text(initial).focus(function () {
          return $(this).text("").removeClass("empty");
        }).focusout(function () {
          if (!this.value) {
            return $(this).addClass("empty").text(initial);
          }
        });
      }
    };

    return HistoryBrowser;
  }();

  window.HistoryBrowser = HistoryBrowser;
}).call(undefined);