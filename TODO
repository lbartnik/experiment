* General:
  - make the session env a part of the state object
  - add a `commit_id` argument to `tracking_on`; create a `tracking_on_`
    programmatic (non-interactive) API

* Widget:
  - maximize tooltip/plot towards the center of the canvas
    add onmouseout to tooltip/plot in case it covers the node/miniature

  - make tooltip the size of the node and transparent, and then maximize
    it similarly to plots - the mouse cursor will stay "mouseover" throught
    the interaction

  - use RStudio addins to browse history with keyboard (up/down),
    similarly to Ctrl+R in regular R console

* tracking:
  - examine the .Last.value - in case there was no object
  - ignore plots present on the device upon turning tracking on
  - wait for failed commands and if one arrives, check if the user entered
    a valid commit/object id, and if so, restore it

* explain: find a full sequence of calls leading to a given object
  - option to plot explanation as a graph with vis.js

* UI:
  - show history of commits
  - print commits
  - show history of expressions in the current branch
  - list branches
  - name branches
  - clean the stash


* move plot.result to compare - plot.result should show something
  similar to plot.graph - a graph of inter-related objects

